{"version":3,"sources":["script.js"],"names":["weather","apiKey","fetchWeather","city","fetch","then","response","ok","alert","Error","json","data","displayWeather","name","icon","description","main","temp","humidity","speed","wind","console","log","document","querySelector","innerText","src","classList","remove","search","value","addEventListener","event","key"],"mappings":";;AAAA,IAAIA,OAAO,GAAG;AACV;AACAC,EAAAA,MAAM,EAAE,kCAFE;AAGV;AACAC,EAAAA,YAAY,EAAE,sBAAUC,IAAV,EAAgB;AAAA;;AAC5BC,IAAAA,KAAK,CACH,uDACED,IADF,GAEE,sBAFF,GAGE,KAAKF,MAJJ,CAAL,CAMCI,IAND,CAMM,UAACC,QAAD,EAAc;AAClB;AACA,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChBC,QAAAA,KAAK,CAAC,mBAAD,CAAL;AACA,cAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAN;AACD,OALiB,CAMlB;;;AACA,aAAOH,QAAQ,CAACI,IAAT,EAAP;AACD,KAdD,EAeCL,IAfD,CAeM,UAACM,IAAD;AAAA,aAAU,KAAI,CAACC,cAAL,CAAoBD,IAApB,CAAV;AAAA,KAfN;AAgBD,GArBS;AAsBV;AACAC,EAAAA,cAAc,EAAE,wBAASD,IAAT,EAAe;AAC3B;AAD2B,QAEnBE,IAFmB,GAEVF,IAFU,CAEnBE,IAFmB;AAAA,yBAGEF,IAAI,CAACX,OAAL,CAAa,CAAb,CAHF;AAAA,QAGpBc,IAHoB,kBAGpBA,IAHoB;AAAA,QAGdC,WAHc,kBAGdA,WAHc;AAAA,qBAICJ,IAAI,CAACK,IAJN;AAAA,QAInBC,IAJmB,cAInBA,IAJmB;AAAA,QAIbC,QAJa,cAIbA,QAJa;AAAA,QAKnBC,KALmB,GAKTR,IAAI,CAACS,IALI,CAKnBD,KALmB,EAM3B;;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ,EAAiBC,IAAjB,EAAsBC,WAAtB,EAAkCE,IAAlC,EAAuCC,QAAvC,EAAgDC,KAAhD,EAP2B,CAQ3B;;AACAI,IAAAA,QAAQ,CAACC,aAAT,CAAuB,OAAvB,EAAgCC,SAAhC,GAA4C,gBAAgBZ,IAA5D;AACAU,IAAAA,QAAQ,CAACC,aAAT,CAAuB,OAAvB,EAAgCE,GAAhC,GAAsC,qCAAqCZ,IAArC,GAA4C,MAAlF;AACAS,IAAAA,QAAQ,CAACC,aAAT,CAAuB,cAAvB,EAAuCC,SAAvC,GAAmDV,WAAnD;AACAQ,IAAAA,QAAQ,CAACC,aAAT,CAAuB,OAAvB,EAAgCC,SAAhC,GAA4CR,IAAI,GAAG,IAAnD;AACAM,IAAAA,QAAQ,CAACC,aAAT,CAAuB,WAAvB,EAAoCC,SAApC,GAAgD,eAAeP,QAAf,GAA0B,GAA1E;AACAK,IAAAA,QAAQ,CAACC,aAAT,CAAuB,OAAvB,EAAgCC,SAAhC,GAA4C,iBAAiBN,KAAjB,GAAyB,OAArE;AACAI,IAAAA,QAAQ,CAACC,aAAT,CAAuB,SAAvB,EAAkCG,SAAlC,CAA4CC,MAA5C,CAAmD,SAAnD;AACH,GAvCS;AAwCV;AACAC,EAAAA,MAAM,EAAE,kBAAW;AACf,SAAK3B,YAAL,CAAmBqB,QAAQ,CAACC,aAAT,CAAuB,aAAvB,EAAsCM,KAAzD;AACH;AA3CS,CAAd,C,CA8CA;;AACAP,QAAQ,CAACC,aAAT,CAAuB,gBAAvB,EAAyCO,gBAAzC,CAA0D,OAA1D,EAAmE,YAAY;AAC3E/B,EAAAA,OAAO,CAAC6B,MAAR;AACH,CAFD,E,CAIA;;AACAN,QAAQ,CAACC,aAAT,CAAuB,aAAvB,EAAsCO,gBAAtC,CAAuD,OAAvD,EAAgE,UAAUC,KAAV,EAAgB;AAC5E,MAAIA,KAAK,CAACC,GAAN,IAAa,OAAjB,EAA0B;AACtBjC,IAAAA,OAAO,CAAC6B,MAAR;AACH;AACJ,CAJD,E,CAMA;;AACA7B,OAAO,CAACE,YAAR,CAAqB,aAArB","sourcesContent":["let weather = {\r\n    // Property that holds the API key for OpenWeatherMap\r\n    apiKey: \"c235b39beb859eeb30e3774b3a867a45\",\r\n    // Method that makes a fetch request to the OpenWeatherMap API to get weather data for a specific city\r\n    fetchWeather: function (city) {\r\n      fetch(\r\n        \"https://api.openweathermap.org/data/2.5/weather?q=\" +\r\n          city +\r\n          \"&units=metric&appid=\" +\r\n          this.apiKey\r\n      )\r\n      .then((response) => {\r\n        // Check if the response was successful\r\n        if (!response.ok) {\r\n          alert(\"No weather found.\");\r\n          throw new Error(\"No weather found.\");\r\n        }\r\n        // If successful, parse the response as JSON\r\n        return response.json();\r\n      })\r\n      .then((data) => this.displayWeather(data));\r\n    },\r\n    // Method that takes the weather data and displays it on the page\r\n    displayWeather: function(data) {\r\n        // Destructure the data to get the values we need\r\n        const { name } = data;\r\n        const {icon, description } = data.weather[0];\r\n        const { temp, humidity } =  data.main;\r\n        const { speed } = data.wind;\r\n        // Log the data to the console\r\n        console.log(name,icon,description,temp,humidity,speed)\r\n        // Update the HTML elements on the page with the weather data\r\n        document.querySelector(\".city\").innerText = \"Weather in \" + name;\r\n        document.querySelector(\".icon\").src = \"https:openweathermap.org/img/wn/\" + icon + \".png\";\r\n        document.querySelector(\".description\").innerText = description;\r\n        document.querySelector(\".temp\").innerText = temp + \"Â°C\";\r\n        document.querySelector(\".humidity\").innerText = \"Humidity: \" + humidity + \"%\";\r\n        document.querySelector(\".wind\").innerText = \"Wind speed: \" + speed + \"km/hr\";\r\n        document.querySelector(\"weather\").classList.remove(\"loading\");\r\n    },\r\n    // Method that get the city from the search bar and call fetchWeather method\r\n    search: function (){\r\n        this.fetchWeather (document.querySelector(\".search-bar\").value);\r\n    }\r\n};\r\n\r\n// Add a click event listener to the search button that calls the search method\r\ndocument.querySelector(\".search button\").addEventListener(\"click\", function () {\r\n    weather.search();\r\n});\r\n\r\n// Add a keyup event listener to the search bar that calls the search method when the enter key is pressed\r\ndocument.querySelector(\".search-bar\").addEventListener(\"keyup\", function (event){\r\n    if (event.key == \"Enter\") {\r\n        weather.search();\r\n    }\r\n});\r\n\r\n// Fetch the weather for Minneapolis by default\r\nweather.fetchWeather(\"Minneapolis\");\r\n"],"file":"script.dev.js"}